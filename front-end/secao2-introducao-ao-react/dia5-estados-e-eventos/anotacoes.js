
<>
<h1>Existem duas principais conven√ß√µes ao criar um event handler:

Ele deve ser criado no componente que ser√° utilizado;

O nome da fun√ß√£o deve come√ßar com handle, seguido do nome do evento. Se o evento for onChange, utilizamos handleChange.</h1>

<h2>
    Alguns eventos mais comuns s√£o:

onChange: utilizado quando algum elemento sofre altera√ß√£o;
onClick: utilizado quando um elemento √© clicado;
onMouseOver: utilizado quando o mouse passa por cima de algum elemento;
onBlur: utilizado quando um elemento perde o foco (utilizado principalmente em inputs de formul√°rios).

<h1>
Observa√ß√£oüîé: Em algumas situa√ß√µes voc√™ precisar√° passar argumentos para a fun√ß√£o handleClick. Instintivamente, voc√™ pode pensar em escrever dessa forma: onClick={ handleClick(arg) }.

Entretanto, nesse caso, o correto √© invoc√°-la dentro de uma fun√ß√£o an√¥nima: onClick={ (arg) => handleClick(arg) }.

Dessa forma, passamos uma fun√ß√£o para o listener onClick ao mesmo tempo em que conseguimos passar argumentos ao handleClick. Mais adiante, analisaremos um exemplo pr√°tico.
</h1>

<h1>
Quando queremos capturar alguma informa√ß√£o do elemento, podemos receb√™-la como argumento de uma fun√ß√£o an√¥nima. Assim como no JavaScript vanilla, toda fun√ß√£o passada para um event listener receber√° como primeiro argumento o respectivo evento.
</h1>

function Input() {
  return (
    <>
      <h1>Digite o seu primeiro nome:</h1>
      <input 
        name="firstName"
        onChange={ (event) => alert(event.target.value) }
      />
    </>
  )
}

</>

{/* Estado de um componente */}

Anota a√≠:üìù A palavra state tamb√©m √© usada para se referir a estado.

Usar HOOKS sempre no top level da fun√ßao
Todo HOOK deve come√ßar com 'use', ex: useState, useEffect, useContext
